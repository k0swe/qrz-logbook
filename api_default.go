/*
 * QRZ Logbook API
 *
 * This API provides methods for external programs to interact with the QRZ Logbook using an HTTP REST interface. The QRZ Logbook is a combination free and paid subscription service of QRZ. Some advanced features require a valid subscription while the majority of operations are free to all QRZ members. All users of the QRZ Logbook, regardless of their subscription status, may access, edit, update, and view their complete logs online at the QRZ website.
 *
 * API version: 1.0.0
 * Contact: flloyd@qrz.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qrzlog

import (
	_context "context"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

// RootPostOpts Optional parameters for the method 'RootPost'
type RootPostOpts struct {
	ADIF   optional.String
	OPTION optional.String
	LOGIDS optional.String
}

/*
RootPost The do-everything endpoint
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param kEY A QRZ supplied logbook access key
 * @param aCTION Type of request, i.e. INSERT, DELETE, UPLOAD, etc.
 * @param optional nil or *RootPostOpts - Optional Parameters:
 * @param "ADIF" (optional.String) -  ADIF formatted input data
 * @param "OPTION" (optional.String) -  Action-specific options
 * @param "LOGIDS" (optional.String) -  A comma separated list of integer logid values
@return Response
*/
func (a *DefaultApiService) RootPost(ctx _context.Context, kEY string, aCTION string, localVarOptionals *RootPostOpts) (Response, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Response
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-www-form-urlencoded"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("KEY", parameterToString(kEY, ""))
	localVarFormParams.Add("ACTION", parameterToString(aCTION, ""))
	if localVarOptionals != nil && localVarOptionals.ADIF.IsSet() {
		localVarFormParams.Add("ADIF", parameterToString(localVarOptionals.ADIF.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OPTION.IsSet() {
		localVarFormParams.Add("OPTION", parameterToString(localVarOptionals.OPTION.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LOGIDS.IsSet() {
		localVarFormParams.Add("LOGIDS", parameterToString(localVarOptionals.LOGIDS.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
