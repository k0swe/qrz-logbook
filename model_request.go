/*
QRZ Logbook API

This API provides methods for external programs to interact with the QRZ Logbook using an HTTP REST interface. The QRZ Logbook is a combination free and paid subscription service of QRZ. Some advanced features require a valid subscription while the majority of operations are free to all QRZ members. All users of the QRZ Logbook, regardless of their subscription status, may access, edit, update, and view their complete logs online at the QRZ website.

API version: 1.0.0
Contact: flloyd@qrz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qrzlog

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Request{}

// Request struct for Request
type Request struct {
	// A QRZ supplied logbook access key
	KEY string `json:"KEY"`
	// Type of request, i.e. INSERT, DELETE, UPLOAD, etc.
	ACTION string `json:"ACTION"`
	// ADIF formatted input data
	ADIF *string `json:"ADIF,omitempty"`
	// Action-specific options
	OPTION *string `json:"OPTION,omitempty"`
	// A comma separated list of integer logid values
	LOGIDS *string `json:"LOGIDS,omitempty"`
}

type _Request Request

// NewRequest instantiates a new Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequest(kEY string, aCTION string) *Request {
	this := Request{}
	this.KEY = kEY
	this.ACTION = aCTION
	return &this
}

// NewRequestWithDefaults instantiates a new Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestWithDefaults() *Request {
	this := Request{}
	return &this
}

// GetKEY returns the KEY field value
func (o *Request) GetKEY() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KEY
}

// GetKEYOk returns a tuple with the KEY field value
// and a boolean to check if the value has been set.
func (o *Request) GetKEYOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KEY, true
}

// SetKEY sets field value
func (o *Request) SetKEY(v string) {
	o.KEY = v
}

// GetACTION returns the ACTION field value
func (o *Request) GetACTION() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ACTION
}

// GetACTIONOk returns a tuple with the ACTION field value
// and a boolean to check if the value has been set.
func (o *Request) GetACTIONOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ACTION, true
}

// SetACTION sets field value
func (o *Request) SetACTION(v string) {
	o.ACTION = v
}

// GetADIF returns the ADIF field value if set, zero value otherwise.
func (o *Request) GetADIF() string {
	if o == nil || IsNil(o.ADIF) {
		var ret string
		return ret
	}
	return *o.ADIF
}

// GetADIFOk returns a tuple with the ADIF field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetADIFOk() (*string, bool) {
	if o == nil || IsNil(o.ADIF) {
		return nil, false
	}
	return o.ADIF, true
}

// HasADIF returns a boolean if a field has been set.
func (o *Request) HasADIF() bool {
	if o != nil && !IsNil(o.ADIF) {
		return true
	}

	return false
}

// SetADIF gets a reference to the given string and assigns it to the ADIF field.
func (o *Request) SetADIF(v string) {
	o.ADIF = &v
}

// GetOPTION returns the OPTION field value if set, zero value otherwise.
func (o *Request) GetOPTION() string {
	if o == nil || IsNil(o.OPTION) {
		var ret string
		return ret
	}
	return *o.OPTION
}

// GetOPTIONOk returns a tuple with the OPTION field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetOPTIONOk() (*string, bool) {
	if o == nil || IsNil(o.OPTION) {
		return nil, false
	}
	return o.OPTION, true
}

// HasOPTION returns a boolean if a field has been set.
func (o *Request) HasOPTION() bool {
	if o != nil && !IsNil(o.OPTION) {
		return true
	}

	return false
}

// SetOPTION gets a reference to the given string and assigns it to the OPTION field.
func (o *Request) SetOPTION(v string) {
	o.OPTION = &v
}

// GetLOGIDS returns the LOGIDS field value if set, zero value otherwise.
func (o *Request) GetLOGIDS() string {
	if o == nil || IsNil(o.LOGIDS) {
		var ret string
		return ret
	}
	return *o.LOGIDS
}

// GetLOGIDSOk returns a tuple with the LOGIDS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetLOGIDSOk() (*string, bool) {
	if o == nil || IsNil(o.LOGIDS) {
		return nil, false
	}
	return o.LOGIDS, true
}

// HasLOGIDS returns a boolean if a field has been set.
func (o *Request) HasLOGIDS() bool {
	if o != nil && !IsNil(o.LOGIDS) {
		return true
	}

	return false
}

// SetLOGIDS gets a reference to the given string and assigns it to the LOGIDS field.
func (o *Request) SetLOGIDS(v string) {
	o.LOGIDS = &v
}

func (o Request) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["KEY"] = o.KEY
	toSerialize["ACTION"] = o.ACTION
	if !IsNil(o.ADIF) {
		toSerialize["ADIF"] = o.ADIF
	}
	if !IsNil(o.OPTION) {
		toSerialize["OPTION"] = o.OPTION
	}
	if !IsNil(o.LOGIDS) {
		toSerialize["LOGIDS"] = o.LOGIDS
	}
	return toSerialize, nil
}

func (o *Request) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"KEY",
		"ACTION",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequest := _Request{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequest)

	if err != nil {
		return err
	}

	*o = Request(varRequest)

	return err
}

type NullableRequest struct {
	value *Request
	isSet bool
}

func (v NullableRequest) Get() *Request {
	return v.value
}

func (v *NullableRequest) Set(val *Request) {
	v.value = val
	v.isSet = true
}

func (v NullableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequest(val *Request) *NullableRequest {
	return &NullableRequest{value: val, isSet: true}
}

func (v NullableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
