/*
QRZ Logbook API

This API provides methods for external programs to interact with the QRZ Logbook using an HTTP REST interface. The QRZ Logbook is a combination free and paid subscription service of QRZ. Some advanced features require a valid subscription while the majority of operations are free to all QRZ members. All users of the QRZ Logbook, regardless of their subscription status, may access, edit, update, and view their complete logs online at the QRZ website.

API version: 1.0.0
Contact: flloyd@qrz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qrzlog

import (
	"encoding/json"
)

// checks if the Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Response{}

// Response struct for Response
type Response struct {
	// OK when the operation succeeds, FAIL when the operation failed, AUTH when API Access lacked sufficient privileges for the operation, or other action-specific codes
	RESULT *string `json:"RESULT,omitempty"`
	// Used with RESULT=FAIL to describe the specific reason for failure
	REASON *string `json:"REASON,omitempty"`
	// A comma separated list of logid values that were affected by the action
	LOGIDS *string `json:"LOGIDS,omitempty"`
	// The logid value of the record that was inserted or replaced. (Singular \"LOGID\" response only used by INSERT as it is a single record operation.)
	LOGID *string `json:"LOGID,omitempty"`
	// The number of QSO records that were affected by the action
	COUNT *string `json:"COUNT,omitempty"`
	// Used for action-specific data such as status reports
	DATA *string `json:"DATA,omitempty"`
}

// NewResponse instantiates a new Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponse() *Response {
	this := Response{}
	return &this
}

// NewResponseWithDefaults instantiates a new Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseWithDefaults() *Response {
	this := Response{}
	return &this
}

// GetRESULT returns the RESULT field value if set, zero value otherwise.
func (o *Response) GetRESULT() string {
	if o == nil || IsNil(o.RESULT) {
		var ret string
		return ret
	}
	return *o.RESULT
}

// GetRESULTOk returns a tuple with the RESULT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetRESULTOk() (*string, bool) {
	if o == nil || IsNil(o.RESULT) {
		return nil, false
	}
	return o.RESULT, true
}

// HasRESULT returns a boolean if a field has been set.
func (o *Response) HasRESULT() bool {
	if o != nil && !IsNil(o.RESULT) {
		return true
	}

	return false
}

// SetRESULT gets a reference to the given string and assigns it to the RESULT field.
func (o *Response) SetRESULT(v string) {
	o.RESULT = &v
}

// GetREASON returns the REASON field value if set, zero value otherwise.
func (o *Response) GetREASON() string {
	if o == nil || IsNil(o.REASON) {
		var ret string
		return ret
	}
	return *o.REASON
}

// GetREASONOk returns a tuple with the REASON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetREASONOk() (*string, bool) {
	if o == nil || IsNil(o.REASON) {
		return nil, false
	}
	return o.REASON, true
}

// HasREASON returns a boolean if a field has been set.
func (o *Response) HasREASON() bool {
	if o != nil && !IsNil(o.REASON) {
		return true
	}

	return false
}

// SetREASON gets a reference to the given string and assigns it to the REASON field.
func (o *Response) SetREASON(v string) {
	o.REASON = &v
}

// GetLOGIDS returns the LOGIDS field value if set, zero value otherwise.
func (o *Response) GetLOGIDS() string {
	if o == nil || IsNil(o.LOGIDS) {
		var ret string
		return ret
	}
	return *o.LOGIDS
}

// GetLOGIDSOk returns a tuple with the LOGIDS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetLOGIDSOk() (*string, bool) {
	if o == nil || IsNil(o.LOGIDS) {
		return nil, false
	}
	return o.LOGIDS, true
}

// HasLOGIDS returns a boolean if a field has been set.
func (o *Response) HasLOGIDS() bool {
	if o != nil && !IsNil(o.LOGIDS) {
		return true
	}

	return false
}

// SetLOGIDS gets a reference to the given string and assigns it to the LOGIDS field.
func (o *Response) SetLOGIDS(v string) {
	o.LOGIDS = &v
}

// GetLOGID returns the LOGID field value if set, zero value otherwise.
func (o *Response) GetLOGID() string {
	if o == nil || IsNil(o.LOGID) {
		var ret string
		return ret
	}
	return *o.LOGID
}

// GetLOGIDOk returns a tuple with the LOGID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetLOGIDOk() (*string, bool) {
	if o == nil || IsNil(o.LOGID) {
		return nil, false
	}
	return o.LOGID, true
}

// HasLOGID returns a boolean if a field has been set.
func (o *Response) HasLOGID() bool {
	if o != nil && !IsNil(o.LOGID) {
		return true
	}

	return false
}

// SetLOGID gets a reference to the given string and assigns it to the LOGID field.
func (o *Response) SetLOGID(v string) {
	o.LOGID = &v
}

// GetCOUNT returns the COUNT field value if set, zero value otherwise.
func (o *Response) GetCOUNT() string {
	if o == nil || IsNil(o.COUNT) {
		var ret string
		return ret
	}
	return *o.COUNT
}

// GetCOUNTOk returns a tuple with the COUNT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetCOUNTOk() (*string, bool) {
	if o == nil || IsNil(o.COUNT) {
		return nil, false
	}
	return o.COUNT, true
}

// HasCOUNT returns a boolean if a field has been set.
func (o *Response) HasCOUNT() bool {
	if o != nil && !IsNil(o.COUNT) {
		return true
	}

	return false
}

// SetCOUNT gets a reference to the given string and assigns it to the COUNT field.
func (o *Response) SetCOUNT(v string) {
	o.COUNT = &v
}

// GetDATA returns the DATA field value if set, zero value otherwise.
func (o *Response) GetDATA() string {
	if o == nil || IsNil(o.DATA) {
		var ret string
		return ret
	}
	return *o.DATA
}

// GetDATAOk returns a tuple with the DATA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetDATAOk() (*string, bool) {
	if o == nil || IsNil(o.DATA) {
		return nil, false
	}
	return o.DATA, true
}

// HasDATA returns a boolean if a field has been set.
func (o *Response) HasDATA() bool {
	if o != nil && !IsNil(o.DATA) {
		return true
	}

	return false
}

// SetDATA gets a reference to the given string and assigns it to the DATA field.
func (o *Response) SetDATA(v string) {
	o.DATA = &v
}

func (o Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RESULT) {
		toSerialize["RESULT"] = o.RESULT
	}
	if !IsNil(o.REASON) {
		toSerialize["REASON"] = o.REASON
	}
	if !IsNil(o.LOGIDS) {
		toSerialize["LOGIDS"] = o.LOGIDS
	}
	if !IsNil(o.LOGID) {
		toSerialize["LOGID"] = o.LOGID
	}
	if !IsNil(o.COUNT) {
		toSerialize["COUNT"] = o.COUNT
	}
	if !IsNil(o.DATA) {
		toSerialize["DATA"] = o.DATA
	}
	return toSerialize, nil
}

type NullableResponse struct {
	value *Response
	isSet bool
}

func (v NullableResponse) Get() *Response {
	return v.value
}

func (v *NullableResponse) Set(val *Response) {
	v.value = val
	v.isSet = true
}

func (v NullableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponse(val *Response) *NullableResponse {
	return &NullableResponse{value: val, isSet: true}
}

func (v NullableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
